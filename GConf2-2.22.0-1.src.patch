--- origsrc/GConf-2.22.0/backends/xml-backend.c	2007-06-25 06:11:19.000000000 -0500
+++ src/GConf-2.22.0/backends/xml-backend.c	2008-05-28 07:37:24.796875000 -0500
@@ -797,7 +797,7 @@
 
 /* Initializer */
 
-#ifndef G_OS_WIN32
+#ifndef G_PLATFORM_WIN32
 /* If we use G_MODULE_EXPORT, *only* thusly marked functions will be
  * exported, and xml-test uses other ones, too.
  */
@@ -814,7 +814,7 @@
   return NULL;
 }
 
-#ifndef G_OS_WIN32
+#ifndef G_PLATFORM_WIN32
 G_MODULE_EXPORT
 #endif
 GConfBackendVTable* 
--- origsrc/GConf-2.22.0/gconf/gconf-internals.c	2008-01-28 09:34:50.000000000 -0600
+++ src/GConf-2.22.0/gconf/gconf-internals.c	2008-05-28 07:37:24.812500000 -0500
@@ -2215,16 +2215,6 @@
   int    lock_fd;
 };
 
-static void
-gconf_lock_destroy (GConfLock* lock)
-{
-  if (lock->lock_fd >= 0)
-    close (lock->lock_fd);
-  g_free (lock->iorfile);
-  g_free (lock->lock_directory);
-  g_free (lock);
-}
-
 #ifndef G_OS_WIN32
 
 static void
@@ -2265,26 +2255,41 @@
 }
 #endif
 
-#ifdef F_SETLK
+#ifdef G_PLATFORM_WIN32
+/* We don't use these macros */
+#elif defined (F_SETLK)
 #define lock_entire_file(fd) \
   lock_reg ((fd), F_SETLK, F_WRLCK, 0, SEEK_SET, 0)
 #define unlock_entire_file(fd) \
   lock_reg ((fd), F_SETLK, F_UNLCK, 0, SEEK_SET, 0)
-#elif defined (G_OS_WIN32)
-/* We don't use these macros */
 #else
 #warning Please implement proper locking
 #define lock_entire_file(fd) 0
 #define unlock_entire_file(fd) 0
 #endif
 
+static void
+gconf_lock_destroy (GConfLock* lock)
+{
+  if (lock->lock_fd >= 0)
+    close (lock->lock_fd);
+
+  g_free (lock->iorfile);
+  g_free (lock->lock_directory);
+  g_free (lock);
+}
+
 static gboolean
 file_locked_by_someone_else (int fd)
 {
 #ifdef F_SETLK
   struct flock lock;
 
+#ifdef G_WITH_CYGWIN
+  lock.l_type = F_RDLCK;
+#else
   lock.l_type = F_WRLCK;
+#endif
   lock.l_start = 0;
   lock.l_whence = SEEK_SET;
   lock.l_len = 0;
@@ -2301,7 +2306,7 @@
 #endif
 }
 
-#ifndef G_OS_WIN32
+#ifndef G_PLATFORM_WIN32
 
 static char*
 unique_filename (const char *directory)
@@ -2326,7 +2331,7 @@
   int fd;
   gboolean got_lock = FALSE;
 
-#ifndef G_OS_WIN32
+#ifndef G_PLATFORM_WIN32
 
   char *uniquefile = unique_filename (directory);
 
@@ -2380,7 +2385,12 @@
   unlink (uniquefile);
   g_free (uniquefile);
 
-#else
+#elif defined (G_WITH_CYGWIN)
+
+  fd = open (filename, O_WRONLY|O_CREAT|O_EXCL);
+  got_lock = (fd >= 0);
+
+#else  /* G_OS_WIN32 */
 
   if (G_WIN32_HAVE_WIDECHAR_API ())
     {
@@ -2426,7 +2436,7 @@
    * get that lock, delete it, then start over.
    */
 
-#ifndef G_OS_WIN32
+#ifndef G_PLATFORM_WIN32
 
   fd = open (filename, O_RDWR, 0700);
   if (fd < 0)
@@ -2701,7 +2711,7 @@
       goto out;
     }
 
-#ifndef G_OS_WIN32
+#ifndef G_PLATFORM_WIN32
 
   /* To avoid annoying .nfs3435314513453145 files on unlink, which keep us
    * from removing the lock directory, we don't want to hold the
@@ -2746,7 +2756,7 @@
       lock->lock_fd = -1;
     }
 
-#ifndef G_OS_WIN32
+#ifndef G_PLATFORM_WIN32
 
   /* Now remove the temporary link we used to avoid .nfs351453 garbage */
   if (unlink (uniquefile) < 0)
--- origsrc/GConf-2.22.0/gconf/gconf-sanity-check.c	2007-11-01 14:35:40.000000000 -0500
+++ src/GConf-2.22.0/gconf/gconf-sanity-check.c	2008-05-28 07:37:24.828125000 -0500
@@ -76,7 +76,7 @@
   return 0;
 }
 
-#ifdef F_SETLK
+#ifndef G_PLATFORM_WIN32
 /* Your basic Stevens cut-and-paste */
 static int
 lock_reg (int fd, int cmd, int type, off_t offset, int whence, off_t len)
@@ -92,7 +92,9 @@
 }
 #endif
 
-#ifdef F_SETLK
+#ifdef G_PLATFORM_WIN32
+/* We don't use these macros */
+#elif defined (F_SETLK)
 #define lock_entire_file(fd) \
   lock_reg ((fd), F_SETLK, F_WRLCK, 0, SEEK_SET, 0)
 #define unlock_entire_file(fd) \
@@ -161,6 +163,7 @@
         }
     }
       
+#ifndef G_PLATFORM_WIN32
 
   if (lock_entire_file (fd) < 0)
     {      
@@ -176,6 +179,8 @@
       goto out;
     }
 
+#endif
+
   retval = TRUE;
 
  out:
--- origsrc/GConf-2.22.0/gconf/gconfd.c	2008-01-08 08:27:41.000000000 -0600
+++ src/GConf-2.22.0/gconf/gconfd.c	2008-05-28 07:37:24.843750000 -0500
@@ -543,7 +543,7 @@
 static gboolean
 test_safe_tmp_dir (const char *dirname)
 {
-#ifndef G_OS_WIN32
+#ifndef G_PLATFORM_WIN32
   struct stat statbuf;
   int fd;
 
